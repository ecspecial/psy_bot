const TelegramBot = require("node-telegram-bot-api");
const axios = require("axios");
require('dotenv').config();
const prompts = require("./assets/prompts.js");

const TELEGRAM_TOKEN = process.env.TELEGRAM_TOKEN;
const OPENAI_API_KEY = process.env.OPENAI_API_KEY;
const bot = new TelegramBot(TELEGRAM_TOKEN, { polling: true });

const MAIN_MENU = {
  reply_markup: {
    inline_keyboard: [
      [
        { text: "üåø –û–Ω–ª–∞–π–Ω –ü—Å–∏—Ö–æ–ª–æ–≥", callback_data: "psycholog" }
      ],
      [
        { text: "üçè –û–Ω–ª–∞–π–Ω –î–∏–µ—Ç–æ–ª–æ–≥", callback_data: "dietolog" }
      ],
      [
        { text: "‚≠êÔ∏è –û–Ω–ª–∞–π–Ω –ê—Å—Ç—Ä–æ–ª–æ–≥", callback_data: "astrolog" }
      ],
    ]
  },
  parse_mode: "HTML"
};

const BALANCE_MENU = {
  reply_markup: {
    inline_keyboard: [
      [
        { text: "‚≠êÔ∏è –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 1 –Ω–µ–¥–µ–ª—é - 490 —Ä—É–±.", callback_data: "balance_topup" }
      ],
      [
        { text: "ü•≤ –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data: "balance_cancel" }
      ],
    ]
  },
  parse_mode: "HTML"
};

const BALANCE_OPTIONS_MENU = {
  reply_markup: {
    inline_keyboard: [
    //   [
    //     { text: "–°–ë–ü", callback_data: "topup_sbp" }
    //   ],
      [
        { text: "–ö–∞—Ä—Ç–æ–π", callback_data: "topup_card" }
      ],
      [
        { text: "Telegram Stars", callback_data: "topup_stars" }
      ],
    ]
  },
  parse_mode: "HTML"
};

const userContext = {};
const userHistory = {};

bot.setMyCommands([
    { command: "new", description: "–ù–∞ –≥–ª–∞–≤–Ω—É—é" },
    { command: "balance", description: "–ü–æ–¥–ø–∏—Å–∫–∞ / –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É" },
    { command: "contact", description: "–°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏" },
    { command: "terms", description: "–ü—É–±–ª–∏—á–Ω–∞—è –æ—Ñ–µ—Ä—Ç–∞" },
    { command: "policy", description: "–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏" },
]);

const welcomeMessage = `
–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Women's World!

–ó–¥–µ—Å—å —Ç—ã –ø–æ–ª—É—á–∏—à—å –ø–æ–¥–¥–µ—Ä–∂–∫—É –∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Å–∞–º—ã–µ –≤–∞–∂–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ —Å–µ–±–µ ‚Äî —á–µ—Å—Ç–Ω–æ, –±–µ–∑ –æ—Å—É–∂–¥–µ–Ω–∏—è –∏ –ª–∏—à–Ω–µ–π –≤–æ–¥—ã.

–í—ã–±–µ—Ä–∏, —á—Ç–æ –¥–ª—è —Ç–µ–±—è —Å–µ–π—á–∞—Å –∞–∫—Ç—É–∞–ª—å–Ω–µ–µ:

üåø <b>–û–Ω–ª–∞–π–Ω –ü—Å–∏—Ö–æ–ª–æ–≥</b> ‚Äî –ø–æ–≥–æ–≤–æ—Ä–∏–º –æ —Ç–µ–±–µ, —á—É–≤—Å—Ç–≤–∞—Ö, –≥—Ä–∞–Ω–∏—Ü–∞—Ö, –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö –∏ —Å–∞–º–æ—Ü–µ–Ω–Ω–æ—Å—Ç–∏.

‚≠ê <b>–û–Ω–ª–∞–π–Ω –ê—Å—Ç—Ä–æ–ª–æ–≥–∏—è</b> ‚Äî —Ö–æ—Ä–∞—Ä–Ω–∞—è –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—è (–∞—Å—Ç—Ä–æ–ª–æ–≥–∏—è –≤–æ–ø—Ä–æ—Å–∞) ‚Äî —Ç–æ–ª—å–∫–æ –∫–æ–Ω–∫—Ä–µ—Ç–∏–∫–∞ –∏ –ø–æ –¥–µ–ª—É.

ü•ó <b>–û–Ω–ª–∞–π–Ω –î–∏–µ—Ç–æ–ª–æ–≥</b> ‚Äî –≤—ã—Å—Ç—Ä–æ–∏—à—å –ø–∏—Ç–∞–Ω–∏–µ –ø–æ–¥ —Å–≤–æ—é —Ü–µ–ª—å: –ø–æ—Ö—É–¥–µ–Ω–∏–µ, —ç–Ω–µ—Ä–≥–∏—é –∏–ª–∏ –∑–¥–æ—Ä–æ–≤—å–µ.

üí• <b>–î–Ω–µ–≤–Ω–∏–∫ –ê–≥—Ä–µ—Å—Å–∏–∏</b> ‚Äî –≤—ã–≥–æ–≤–æ—Ä–∏—Å—å –∏ –ø–æ–π–º–∏, —á—Ç–æ –∑–∞ —ç—Ç–∏–º —Å—Ç–æ–∏—Ç.

–í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ç–µ–±—è —Ä–∞–∑–¥–µ–ª –∏ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá
`;

const subscribeText = `
–ß—Ç–æ–±—ã —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Ç–æ–±–æ–π ‚Äî –æ—Ñ–æ—Ä–º–∏ –º–∏–Ω–∏-–ø–æ–¥–ø–∏—Å–∫—É.

–í—Å–µ–≥–æ 490 ‚ÇΩ –≤ –Ω–µ–¥–µ–ª—é. 
–û—Ç–º–µ–Ω–∏—Ç—å –º–æ–∂–Ω–æ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç, –≤ –æ–¥–∏–Ω –∫–ª–∏–∫.

üå∏ –¢—ã –ø–æ–ª—É—á–∏—à—å:

‚Ä¢ –î–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ä–∞–∑–¥–µ–ª–∞–º: –ø—Å–∏—Ö–æ–ª–æ–≥–∏—è, –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—è, –¥–∏–µ—Ç–æ–ª–æ–≥–∏—è, –¥–Ω–µ–≤–Ω–∏–∫ –∞–≥—Ä–µ—Å—Å–∏–∏  
‚Ä¢ –õ—é–¥–µ–π, –∫–æ—Ç–æ—Ä—ã–µ —Ä–∞–±–æ—Ç–∞—é—Ç –ª–∏—á–Ω–æ –ø–æ–¥ —Ç–≤–æ–π –∑–∞–ø—Ä–æ—Å  
‚Ä¢ –ß–µ—Å—Ç–Ω—ã–µ –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã ‚Äî –∏–º–µ–Ω–Ω–æ –Ω–∞ —Ç–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã  
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫—É —Å –≤–Ω–∏–º–∞–Ω–∏–µ–º –∫ —Ç–≤–æ–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏, –±–µ–∑ —à–∞–±–ª–æ–Ω–æ–≤  

‚≠êÔ∏è –ù–∏–∫–∞–∫–∏—Ö —Å–∫—Ä—ã—Ç—ã—Ö —Å–ø–∏—Å–∞–Ω–∏–π ‚Äî –≤—Å—ë –ø—Ä–æ–∑—Ä–∞—á–Ω–æ –∏ –ø–æ-—á–µ—Å—Ç–Ω–æ–º—É.
`;

bot.onText(/\/start|\/new/, async (msg) => {
  const chatId = msg.chat.id;

  // üîÑ Register user in the backend
  try {
    await axios.post("https://numerologyfromkate.com/api/users/register", {
      account_id: String(chatId)
    });
  } catch (err) {
    console.error("‚ùå Failed to register user:", err?.response?.data || err.message);
  }

  await bot.sendPhoto(chatId, "./0.jpg", {
    caption: welcomeMessage,
    parse_mode: "HTML",
    ...MAIN_MENU
  });
});

bot.onText(/\/contact/, (msg) => {
  bot.sendMessage(msg.chat.id, "@KateFromJuly");
});


bot.onText(/\/balance/, (msg) => {
  const chatId = msg.chat.id;
  const balanceMessage = `
<b>‚ú® –î–æ—Å—Ç—É–ø –∫ —Å–µ—Ä–≤–∏—Å—É Women's World ‚Äî –∑–∞ 3 —à–∞–≥–∞:</b>

1Ô∏è‚É£ –í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π —Ç–∞—Ä–∏—Ñ –Ω–∏–∂–µ
2Ô∏è‚É£ –û–ø–ª–∞—Ç–∏ –ª—é–±—ã–º —É–¥–æ–±–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º 
3Ô∏è‚É£ –ü–æ–ª—É—á–∏ –¥–æ—Å—Ç—É–ø –∏ –Ω–∞—á–∏–Ω–∞–π –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è ‚Äî –≤—Å—ë –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã

–°—Ç–æ–∏–º–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–∞ ‚Äî 490 —Ä—É–± / –Ω–µ–¥.

üå∏ <b>–ò—Å–ø–æ–ª—å–∑—É–π –∫–∞–∂–¥—ã–π –¥–µ–Ω—å ‚Äî –∏ —Ç—ã –ø–æ–ª—É—á–∏—à—å:</b>
 ‚Ä¢ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø—Å–∏—Ö–æ–ª–æ–≥–∞, –∞—Å—Ç—Ä–æ–ª–æ–≥–∞, –¥–∏–µ—Ç–æ–ª–æ–≥–∞ –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ  
 ‚Ä¢ –ø–æ–¥–¥–µ—Ä–∂–∫—É 24/7  
 ‚Ä¢ –ø–æ–º–æ—â—å –≤ –ª—é–±—ã—Ö –∂–∏–∑–Ω–µ–Ω–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö  
`;

  bot.sendMessage(chatId, balanceMessage, BALANCE_MENU);
});

bot.onText(/\/terms/, (msg) => {
  bot.sendMessage(msg.chat.id, "https://ekaterinasukhoroslova.tilda.ws/oferta");
});

bot.onText(/\/policy/, (msg) => {
  bot.sendMessage(msg.chat.id, "https://ekaterinasukhoroslova.tilda.ws/politica");
});

bot.on("callback_query", async (query) => {
  const chatId = query.message.chat.id;
  const data = query.data;

  if (data === "astrolog") {
    userContext[chatId] = "–ê—Å—Ç—Ä–æ–ª–æ–≥";
    userHistory[chatId] = [];
    await bot.sendPhoto(chatId, "./2.png", {
      caption: `
<b>‚≠êÔ∏è –•–û–†–ê–†–ù–ê–Ø –ê–°–¢–†–û–õ–û–ì–ò–Ø</b>

–ú–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –¥–∞—ë—Ç —Ç–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å.
–í–∞–∂–Ω–æ –Ω–µ —Ç–≤–æ—è –Ω–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞, –∞ –¥–∞—Ç–∞, –≤—Ä–µ–º—è –∏ –≥–æ—Ä–æ–¥, –≥–¥–µ —Ç—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –≤ –º–æ–º–µ–Ω—Ç –≤–æ–ø—Ä–æ—Å–∞.
–ê—Å—Ç—Ä–æ–ª–æ–≥ —Å—Ç—Ä–æ–∏—Ç –∫–∞—Ä—Ç—É –Ω–∞ —ç—Ç–æ—Ç –º–æ–º–µ–Ω—Ç –∏ –¥–∞—ë—Ç —á—ë—Ç–∫–∏–π –ø—Ä–æ–≥–Ω–æ–∑.
–î–∞—Ç–∞ –∏ –º–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–µ –Ω—É–∂–Ω—ã - —Ä–∞–±–æ—Ç–∞–µ—Ç –º–æ–º–µ–Ω—Ç –∑–∞–ø—Ä–æ—Å–∞.

–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:
- –ü–æ–∑–æ–≤—É—Ç –ª–∏ –º–µ–Ω—è –Ω–∞ —Ä–∞–±–æ—Ç—É?
- –õ—é–±–∏—Ç –ª–∏ –æ–Ω –º–µ–Ω—è?
- –ö—É–ø–∏—Ç –ª–∏ –∫–ª–∏–µ–Ω—Ç –º–æ–π –ø—Ä–æ–¥—É–∫—Ç?
- –°—Ç–æ–∏—Ç –ª–∏ –ø—Ä–∏–Ω–∏–º–∞—Ç—å —ç—Ç–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ?

üì© –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç, –Ω–∞–ø–∏—à–∏:
–¢–æ—á–Ω—É—é –¥–∞—Ç—É, –≤—Ä–µ–º—è –∏ –≥–æ—Ä–æ–¥, –≥–¥–µ —Ç—ã –∑–∞–¥–∞–ª–∞ –≤–æ–ø—Ä–æ—Å.
–ü–æ–¥—Ä–æ–±–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç.

<b>–ü—Ä–∏–º–µ—Ä—ã:</b>
üóì 25.05.2025, 14:30, –ú–æ—Å–∫–≤–∞
–°–µ–π—á–∞—Å –∏—â—É —Ä–∞–±–æ—Ç—É –Ω–∞ HH. –ö–æ–º–ø–∞–Ω–∏—è ‚Äî –ñ–∏–ª–∏ –ë—ã–ª–∏. –ü—Ä–æ—à–ª–∞ 2 —Å–æ–±–µ—Å–∞, –≤–ø–µ—Ä–µ–¥–∏ –µ—â—ë 1. –í–æ–ø—Ä–æ—Å: –ø—Ä–∏–≥–ª–∞—Å—è—Ç –ª–∏ –º–µ–Ω—è –∏ –∫–æ–≥–¥–∞ –≤—ã–π–¥—É –Ω–∞ —Ä–∞–±–æ—Ç—É?

üóì 31.05.2025, 13:50, –ú–æ—Å–∫–≤–∞
–ì–¥–µ –º–æ–π –º—É–∂? –° –∫–µ–º? –í–æ —Å–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç –¥–æ–º–∞? –ü–æ–º–∏—Ä–∏–º—Å—è –ª–∏? –ö—Ç–æ –ø–µ—Ä–≤—ã–π –ø–æ–π–¥—ë—Ç –Ω–∞ –ø—Ä–∏–º–∏—Ä–µ–Ω–∏–µ? –û–Ω —Å–∫–∞–∑–∞–ª, —á—Ç–æ –æ—Ç–µ—Ü –ø—Ä–∏–ª–µ—Ç–∞–µ—Ç –Ω–∞ 4 —á–∞—Å–∞ –≤ –ú–æ—Å–∫–≤—É –∏ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç —Å –Ω–∏–º –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è, –Ω–æ —Å–∞–º –ø—Ä–æ–ø–∞–ª.
`,
    parse_mode: "HTML"
    });
  }

  if (data === "psycholog") {
    userContext[chatId] = "–ü—Å–∏—Ö–æ–ª–æ–≥";
    userHistory[chatId] = [];
    await bot.sendPhoto(chatId, "./1.jpg", {
      caption: `
<b>üß† –û–ù–õ–ê–ô–ù –ü–°–ò–•–û–õ–û–ì</b>

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ, –≥–¥–µ —Ç—ã –º–æ–∂–µ—à—å –æ–¥–∏–Ω –Ω–∞ –æ–¥–∏–Ω –ø—Ä–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å–≤–æ–∏ –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏—è, —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ —Å–µ–±–µ –∏ –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ª–Ω—É—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã.
–ë–µ–∑ –æ—Å—É–∂–¥–µ–Ω–∏—è, –¥–∞–≤–ª–µ–Ω–∏—è –∏ –Ω–∞–≤—è–∑–∞–Ω–Ω—ã—Ö —Å–æ–≤–µ—Ç–æ–≤.

–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å –ø—Å–∏—Ö–æ–ª–æ–≥–æ–º –ø–æ–¥–æ–π–¥–µ—Ç –≤–∞–º, –µ—Å–ª–∏:

- —Ç—è–∂–µ–ª–æ –Ω–∞ –¥—É—à–µ, –∏ –Ω–µ —Å –∫–µ–º –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å
- –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö
- —á—É–≤—Å—Ç–≤—É–µ—à—å —Ç—Ä–µ–≤–æ–≥—É, –∞–ø–∞—Ç–∏—é –∏–ª–∏ –Ω–µ—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
- —Ö–æ—á–µ—à—å –ø–æ–Ω—è—Ç—å, —á–µ–≥–æ —Ö–æ—á–µ—à—å –∏ –∫–∞–∫ —Å–µ–±–µ –ø–æ–º–æ—á—å

–í—Å—ë –ø—Ä–æ—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ –æ–Ω–ª–∞–π–Ω-—á–∞—Ç ‚Äî —É–¥–æ–±–Ω–æ, –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –∏ –≤ —Ç–≤–æ—ë–º —Ä–∏—Ç–º–µ.

<b>üì© –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —á–∞—Ç —Å –ø—Å–∏—Ö–æ–ª–æ–≥–æ–º: –ø—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ—Å—å –∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –Ω–∏–∂–µ</b>

<b>–ü—Ä–∏–º–µ—Ä:</b>

–ú–µ–Ω—è –∑–æ–≤—É—Ç –ï–∫–∞—Ç–µ—Ä–∏–Ω–∞
–ù–µ –º–æ–≥—É —É–π—Ç–∏ –æ—Ç –±—ã–≤—à–µ–≥–æ. –ß—Ç–æ –¥–µ–ª–∞—Ç—å?
`,
      parse_mode: "HTML"
    });
  }

  if (data === "dietolog") {
    userContext[chatId] = "–î–∏–µ—Ç–æ–ª–æ–≥";
    userHistory[chatId] = [];
    await bot.sendPhoto(chatId, "./3.jpg", {
      caption: `
<b>ü•ó –û–ù–õ–ê–ô–ù –î–ò–ï–¢–û–õ–û–ì</b>

–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≤ –≤–æ–ø—Ä–æ—Å–∞—Ö –ø–∏—Ç–∞–Ω–∏—è –∏ –≤–µ—Å–∞ - –±–µ–∑ —Å—Ç—Ä–µ—Å—Å–∞, –¥–∞–≤–ª–µ–Ω–∏—è –∏ –∂—ë—Å—Ç–∫–∏—Ö –∑–∞–ø—Ä–µ—Ç–æ–≤.

–ó–¥–µ—Å—å —Ç—ã –ø–æ–ª—É—á–∏—à—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–∏—Ç–∞–Ω–∏—é ‚Äî —Å —É—á—ë—Ç–æ–º —Ç–≤–æ–∏—Ö —Ü–µ–ª–µ–π, –ø—Ä–∏–≤—ã—á–µ–∫ –∏ –æ–±—Ä–∞–∑–∞ –∂–∏–∑–Ω–∏.

<b>–ü–æ–¥–æ–π–¥—ë—Ç, –µ—Å–ª–∏:</b>
- —Ö–æ—á–µ—à—å –ø–æ—Ö—É–¥–µ—Ç—å, –Ω–æ –Ω–µ –∑–Ω–∞–µ—à—å, —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å
- —Ö–æ—á–µ—à—å –Ω–∞–ª–∞–¥–∏—Ç—å –ø–∏—Ç–∞–Ω–∏–µ –±–µ–∑ –¥–∏–µ—Ç –∏ —Å—Ä—ã–≤–æ–≤
- –ø–µ—Ä–µ–µ–¥–∞–µ—à—å –∏–ª–∏ ¬´–∑–∞–µ–¥–∞–µ—à—å¬ª —Å—Ç—Ä–µ—Å—Å
- —Ö–æ—á–µ—à—å –±–æ–ª—å—à–µ —ç–Ω–µ—Ä–≥–∏–∏ –∏ –ª—ë–≥–∫–æ—Å—Ç–∏ –≤ —Ç–µ–ª–µ
- –Ω—É–∂–µ–Ω –ø–æ–Ω—è—Ç–Ω—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –ø–æ–¥ —Ç–≤–æ–π —Ä–∏—Ç–º –∂–∏–∑–Ω–∏

–í—Å—ë –ø—Ä–æ—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ –æ–Ω–ª–∞–π–Ω-—á–∞—Ç ‚Äî –±—ã—Å—Ç—Ä–æ, –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –∏ –±–µ–∑ –æ—Å—É–∂–¥–µ–Ω–∏—è.
–†–∞—Ü–∏–æ–Ω –ø–æ–¥–±–∏—Ä–∞–µ—Ç—Å—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ: –ø–æ —Ç–≤–æ–∏–º –≤–∫—É—Å–∞–º, —Ü–µ–ª—è–º –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º.

<b>üì© –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Ü–∏–æ–Ω –ø–∏—Ç–∞–Ω–∏—è:</b>
–ù–∞–ø–∏—à–∏ –Ω–∏–∂–µ, –∫ –∫–∞–∫–æ–º—É –≤–µ—Å—É —Ö–æ—á–µ—à—å –ø—Ä–∏–π—Ç–∏ –∏ –∫–∞–∫–∏—Ö —Ü–µ–ª–µ–π –¥–æ—Å—Ç–∏—á—å.

<b>–ü—Ä–∏–º–µ—Ä:</b>
–ú–µ–Ω—è –∑–æ–≤—É—Ç –ï–∫–∞—Ç–µ—Ä–∏–Ω–∞, –≤–µ—à—É 62 –∫–≥, —Ö–æ—á—É –ø–æ—Ö—É–¥–µ—Ç—å –¥–æ 55 –∫–≥. –õ—é–±–ª—é –∫—É—Ä–∏—Ü—É –∏ –º—è—Å–æ, –Ω–µ –µ–º —Ü–≤–µ—Ç–Ω—É—é –∫–∞–ø—É—Å—Ç—É –∏ –æ–ª–∏–≤–∫–∏.
`,
      parse_mode: "HTML"
    });
  }

  if (data === "balance_topup") {
    await bot.sendMessage(chatId, "üå∏ –í—ã–±–µ—Ä–∏ –¥–ª—è —Å–µ–±—è —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", BALANCE_OPTIONS_MENU);
  }

    if (data === "topup_card") {
        try {
            const { data } = await axios.post("https://numerologyfromkate.com/api/payment/init", {
            account_id: String(chatId)
            });

            await bot.sendMessage(chatId, "üîó –î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:", {
            reply_markup: {
                inline_keyboard: [[{ text: "üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url: data.url }]]
            }
            });
        } catch (err) {
            const errorText = err?.response?.data?.error;
            if (errorText === "Subscription already active") {
            await bot.sendMessage(chatId, "üéâ –£ –≤–∞—Å —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞! –°–ø–∞—Å–∏–±–æ üôè");
            } else {
            console.error("‚ùå Failed to generate payment link:", err?.response?.data || err.message);
            await bot.sendMessage(chatId, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
            }
        }
    }

    // if (data === "topup_sbp") {
    //     try {
    //         const { data } = await axios.post("https://numerologyfromkate.com/api/payment/sbp", {
    //         account_id: String(chatId)
    //         });

    //         await bot.sendMessage(chatId, "üîó –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –°–ë–ü:", {
    //         reply_markup: {
    //             inline_keyboard: [
    //             [{ text: "üöÄ –û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ –°–ë–ü", url: data.url }]
    //             ]
    //         }
    //         });
    //     } catch (err) {
    //         console.error("‚ùå SBP link error:", err?.response?.data || err.message);
    //         await bot.sendMessage(chatId, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    //     }
    // }

    if (data === "balance_cancel") {
        try {
            const response = await axios.post("https://numerologyfromkate.com/api/subscription/cancel", {
            account_id: String(chatId)
            });

            await bot.sendMessage(chatId, "–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞. –í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –ø–æ–∑–∂–µ ‚ù§Ô∏è");
        } catch (err) {
            const msg = err?.response?.data?.error || err.message;

            if (msg === "No active subscription to cancel") {
            await bot.sendMessage(chatId, "üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.");
            } else if (msg === "Subscription payment not recurrent") {
            await bot.sendMessage(chatId, "üßæ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∫—É–ø–ª–µ–Ω–∞ –ø—Ä–∏ –ø–æ–º–æ—â–∏ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞, –¥–∞–ª—å–Ω–µ–π—à–∏—Ö —Å–ø–∏—Å–∞–Ω–∏–π –Ω–µ –±—É–¥–µ—Ç. –°–ø–∞—Å–∏–±–æ üôè");
            }
            else {
            console.error("‚ùå Cancel error:", msg);
            await bot.sendMessage(chatId, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
            }
        }
    }

    if (data === "topup_stars") {

        try {
            const { data: status } = await axios.post("https://numerologyfromkate.com/api/subscription/check", {
            account_id: String(chatId)
            });

            if (status.allowed) {
            await bot.sendMessage(chatId, "üéâ –£ –≤–∞—Å —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞! –°–ø–∞—Å–∏–±–æ üôè");
            return;
            }
        } catch (err) {
            console.error("‚ùå Stars check error:", err?.response?.data || err.message);
            await bot.sendMessage(chatId, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
            return;
        }
        
        const priceInStars = 200;                 // 490 Stars for 1 week
        const payload      = `stars_${chatId}_${Date.now()}`;   // anything you want

        await bot.sendInvoice(
            chatId,
            "Women‚Äôs World ‚ú® –ø–æ–¥–ø–∏—Å–∫–∞ 7 –¥–Ω–µ–π",
            "‚ö° –í—Å–µ —ç–∫—Å–ø–µ—Ä—Ç—ã —Å—Ä–∞–∑—É: –ø—Å–∏—Ö–æ–ª–æ–≥, –∞—Å—Ç—Ä–æ–ª–æ–≥, –¥–∏–µ—Ç–æ–ª–æ–≥.",
            payload,
            "",                           // provider_token ‚Äî empty for Stars
            "XTR",                        // currency
            [ { label: "\u00A0", amount: priceInStars } ],
            {
                // optional deep-link parameter ‚Üí Pay-button caption
                reply_markup: {
                inline_keyboard: [
                    [{ text: "üí´ –û–ø–ª–∞—Ç–∏—Ç—å 200 Stars", pay: true }]
                ]
                }
            }
            );
  }

  bot.answerCallbackQuery(query.id); // remove loading spinner on button press
});

bot.on("pre_checkout_query", async (query) => {
  try {
    const chatId = query.from.id;

    const { data: status } = await axios.post("https://numerologyfromkate.com/api/subscription/check", {
      account_id: String(chatId)
    });

    if (status.allowed) {
      // ‚ùå Already subscribed ‚Äî reject payment
      await bot.answerPreCheckoutQuery(query.id, false, {
        error_message: "üéâ –£ –≤–∞—Å —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞! –°–ø–∞—Å–∏–±–æ üôè"
      });
      return;
    }

    // ‚úÖ Allow payment
    await bot.answerPreCheckoutQuery(query.id, true);
  } catch (err) {
    console.error("‚ùå Error in pre_checkout_query:", err?.response?.data || err.message);
    await bot.answerPreCheckoutQuery(query.id, false, {
      error_message: "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    });
  }
});

async function askOpenAI(role, messages) {

  const contextMessages = messages.slice(-20).map((m, i) => ({
    role: i % 2 === 0 ? "user" : "assistant",
    content: m
  }));

  try {
    const response = await axios.post("https://api.openai.com/v1/chat/completions", {
      model: "gpt-4o",
      messages: [{ role: "system", content: prompts[role] }]
        .concat(contextMessages)
        .concat({ role: "user", content: messages[messages.length - 1] }),
      temperature: 0.7
    }, {
      headers: {
        "Authorization": `Bearer ${OPENAI_API_KEY}`,
        "Content-Type": "application/json"
      }
    });

    return response.data.choices[0].message.content.trim();
  } catch (error) {
    console.error("OpenAI error:", error?.response?.data || error);
    return "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –ø–æ–º–æ—â–Ω–∏–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.";
  }
}

bot.on("message", async (msg) => {

    if (msg.successful_payment) {
        const chatId  = msg.chat.id;
        const amount  = msg.successful_payment.total_amount;
        const payload = msg.successful_payment.invoice_payload;
        const starsTx = msg.successful_payment.telegram_payment_charge_id;

        console.log(`üí∞ Stars payment ${amount} XTR, tx: ${starsTx}`);

        // Tell your backend to activate the subscription
        try {
        await axios.post("https://numerologyfromkate.com/api/payment/stars-success", {
            account_id: String(chatId),
            amount,
            tx_id:   starsTx,
            payload
        });
        } catch (e) {
        console.error("Could not notify backend:", e.message);
        }

        await bot.sendMessage(chatId,
        "üéâ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞! –î–æ—Å—Ç—É–ø –Ω–∞ –Ω–µ–¥–µ–ª—é –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.\n" +
        "–ó–∞–¥–∞–≤–∞–π —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å ‚Äì –º—ã –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å.");
        return;                    // don‚Äôt fall through to normal text handler
    }

  const chatId = msg.chat.id;
  const text = msg.text?.trim();

  // Ignore commands and button clicks
  if (!text || msg.data || text.startsWith("/")) return;

  const role = userContext[chatId];
  if (!role) {
    return bot.sendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –∏–∑ –º–µ–Ω—é.", MAIN_MENU);
  }

  // Add message to user history
  userHistory[chatId] = userHistory[chatId] || [];
  userHistory[chatId].push(text);

  try {
  const { data } = await axios.post("https://numerologyfromkate.com/api/subscription/check", {
    account_id: String(chatId)
  });

  if (!data.allowed) {
    await bot.sendMessage(chatId, subscribeText, {
        parse_mode: "HTML",
        reply_markup: {
            inline_keyboard: [
            [
                { text: "üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", callback_data: "balance_topup" }
            ]
            ]
        }
        });
        return;
  }
} catch (err) {
  console.error("‚ùå Subscription check error:", err?.response?.data || err.message);
  return bot.sendMessage(chatId, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
}

  const reply = await askOpenAI(role, userHistory[chatId]);
  userHistory[chatId].push(reply);

  return bot.sendMessage(chatId, reply, { parse_mode: "HTML" });
});